// Code generated by counterfeiter. DO NOT EDIT.
package eirinistagingfakes

import (
	"sync"

	"code.cloudfoundry.org/buildpackapplifecycle"
	"code.cloudfoundry.org/eirini-staging"
)

type FakeStagingResultModifier struct {
	ModifyStub        func(buildpackapplifecycle.StagingResult) (buildpackapplifecycle.StagingResult, error)
	modifyMutex       sync.RWMutex
	modifyArgsForCall []struct {
		arg1 buildpackapplifecycle.StagingResult
	}
	modifyReturns struct {
		result1 buildpackapplifecycle.StagingResult
		result2 error
	}
	modifyReturnsOnCall map[int]struct {
		result1 buildpackapplifecycle.StagingResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStagingResultModifier) Modify(arg1 buildpackapplifecycle.StagingResult) (buildpackapplifecycle.StagingResult, error) {
	fake.modifyMutex.Lock()
	ret, specificReturn := fake.modifyReturnsOnCall[len(fake.modifyArgsForCall)]
	fake.modifyArgsForCall = append(fake.modifyArgsForCall, struct {
		arg1 buildpackapplifecycle.StagingResult
	}{arg1})
	fake.recordInvocation("Modify", []interface{}{arg1})
	fake.modifyMutex.Unlock()
	if fake.ModifyStub != nil {
		return fake.ModifyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.modifyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStagingResultModifier) ModifyCallCount() int {
	fake.modifyMutex.RLock()
	defer fake.modifyMutex.RUnlock()
	return len(fake.modifyArgsForCall)
}

func (fake *FakeStagingResultModifier) ModifyCalls(stub func(buildpackapplifecycle.StagingResult) (buildpackapplifecycle.StagingResult, error)) {
	fake.modifyMutex.Lock()
	defer fake.modifyMutex.Unlock()
	fake.ModifyStub = stub
}

func (fake *FakeStagingResultModifier) ModifyArgsForCall(i int) buildpackapplifecycle.StagingResult {
	fake.modifyMutex.RLock()
	defer fake.modifyMutex.RUnlock()
	argsForCall := fake.modifyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStagingResultModifier) ModifyReturns(result1 buildpackapplifecycle.StagingResult, result2 error) {
	fake.modifyMutex.Lock()
	defer fake.modifyMutex.Unlock()
	fake.ModifyStub = nil
	fake.modifyReturns = struct {
		result1 buildpackapplifecycle.StagingResult
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingResultModifier) ModifyReturnsOnCall(i int, result1 buildpackapplifecycle.StagingResult, result2 error) {
	fake.modifyMutex.Lock()
	defer fake.modifyMutex.Unlock()
	fake.ModifyStub = nil
	if fake.modifyReturnsOnCall == nil {
		fake.modifyReturnsOnCall = make(map[int]struct {
			result1 buildpackapplifecycle.StagingResult
			result2 error
		})
	}
	fake.modifyReturnsOnCall[i] = struct {
		result1 buildpackapplifecycle.StagingResult
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingResultModifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.modifyMutex.RLock()
	defer fake.modifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStagingResultModifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eirinistaging.StagingResultModifier = new(FakeStagingResultModifier)
