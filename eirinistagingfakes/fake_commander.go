// Code generated by counterfeiter. DO NOT EDIT.
package eirinistagingfakes

import (
	"sync"

	eirinistaging "code.cloudfoundry.org/eirini-staging"
)

type FakeCommander struct {
	ExecStub        func(cmd string, args ...string) (int, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		cmd  string
		args []string
	}
	execReturns struct {
		result1 int
		result2 error
	}
	execReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommander) Exec(cmd string, args ...string) (int, error) {
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		cmd  string
		args []string
	}{cmd, args})
	fake.recordInvocation("Exec", []interface{}{cmd, args})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(cmd, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.execReturns.result1, fake.execReturns.result2
}

func (fake *FakeCommander) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeCommander) ExecArgsForCall(i int) (string, []string) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].cmd, fake.execArgsForCall[i].args
}

func (fake *FakeCommander) ExecReturns(result1 int, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCommander) ExecReturnsOnCall(i int, result1 int, result2 error) {
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCommander) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommander) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eirinistaging.Commander = new(FakeCommander)
